diff --git a/api/v1/backend/__pycache__/backend_view.cpython-310.pyc b/api/v1/backend/__pycache__/backend_view.cpython-310.pyc
index a64ae7b..5fb8dc6 100644
Binary files a/api/v1/backend/__pycache__/backend_view.cpython-310.pyc and b/api/v1/backend/__pycache__/backend_view.cpython-310.pyc differ
diff --git a/api/v1/backend/backend_view.py b/api/v1/backend/backend_view.py
index a4c03d5..681be28 100644
--- a/api/v1/backend/backend_view.py
+++ b/api/v1/backend/backend_view.py
@@ -50,7 +50,7 @@ def add_book():
         book.save()
 
         # Notify the frontend service using a webhook (localhost)
-        frontend_update_url = 'http://localhost:3001/api/v1/frontend/webhooks/add-book'  # Change to your actual frontend port
+        frontend_update_url = 'http://frontend:5001/api/v1/frontend/webhooks/add-book'  # Change to your actual frontend port
         payload = {'book_id': book.id, 'book_data': book.to_dict()}
         
         # Send book data as payload
@@ -83,7 +83,7 @@ def remove_book(book_id):
         book.delete()
 
         # Notify the frontend service using a webhook
-        frontend_update_url = 'http://localhost:3001/api/v1/frontend/webhooks/remove-book'
+        frontend_update_url = 'http://frontend:5001/api/v1/frontend/webhooks/remove-book'
         payload = {'book_id': book_id}
 
         response = requests.post(frontend_update_url, json=payload)
diff --git a/api/v1/frontend/__pycache__/frontend_view.cpython-310.pyc b/api/v1/frontend/__pycache__/frontend_view.cpython-310.pyc
index 4f79895..ec9374e 100644
Binary files a/api/v1/frontend/__pycache__/frontend_view.cpython-310.pyc and b/api/v1/frontend/__pycache__/frontend_view.cpython-310.pyc differ
diff --git a/api/v1/frontend/frontend_view.py b/api/v1/frontend/frontend_view.py
index ae755a6..8f766e9 100644
--- a/api/v1/frontend/frontend_view.py
+++ b/api/v1/frontend/frontend_view.py
@@ -44,7 +44,7 @@ def enroll_user():
         user.save()
         
         # Notify the backend service using a webhook
-        backend_update_url = 'http://localhost:3000/api/v1/backend/admin/webhooks/add-user'  # URL of the backend service
+        backend_update_url = 'http://backend:5000/api/v1/backend/admin/webhooks/add-user'  # URL of the backend service
         payload = {'user_id': user.id, 'user_data': user.to_dict()}
         
         # Send user data as payload
@@ -169,7 +169,7 @@ def borrow_book(book_id):
         book.save()
 
         # Notify the backend service using a webhook
-        backend_update_url = 'http://localhost:3000/api/v1/backend/admin/webhooks/update-book'
+        backend_update_url = 'http://backend:5000//api/v1/backend/admin/webhooks/update-book'
         payload = {'book_id': book_id, 'is_available': book.is_available}
 
         response = requests.post(backend_update_url, json=payload)
diff --git a/backend/__pycache__/app.cpython-310.pyc b/backend/__pycache__/app.cpython-310.pyc
index 6f8d5a3..61732b6 100644
Binary files a/backend/__pycache__/app.cpython-310.pyc and b/backend/__pycache__/app.cpython-310.pyc differ
diff --git a/config/__pycache__/config.cpython-310.pyc b/config/__pycache__/config.cpython-310.pyc
index 3d9016f..836008b 100644
Binary files a/config/__pycache__/config.cpython-310.pyc and b/config/__pycache__/config.cpython-310.pyc differ
diff --git a/config/config.py b/config/config.py
index a63ade7..4a31950 100644
--- a/config/config.py
+++ b/config/config.py
@@ -5,6 +5,7 @@ from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
 from pythonjsonlogger import jsonlogger
 
 class BaseConfig:
+    SECRET_KEY = os.getenv('SECRET_KEY', 'mysecretkey')
     SQLALCHEMY_TRACK_MODIFICATIONS = False
     LOG_LEVEL = os.getenv('LOG_LEVEL', 'DEBUG')
 
@@ -39,7 +40,7 @@ Config = {
     'frontend_production': FrontendProductionConfig,
     'backend_development': BackendDevelopmentConfig,
     'backend_production': BackendProductionConfig,
-    'test': TestConfig  # Added test configuration
+    'test': TestConfig
 }
 
 def get_config():
diff --git a/frontend/__pycache__/app.cpython-310.pyc b/frontend/__pycache__/app.cpython-310.pyc
index b1d84db..37feaab 100644
Binary files a/frontend/__pycache__/app.cpython-310.pyc and b/frontend/__pycache__/app.cpython-310.pyc differ
diff --git a/frontend/app.py b/frontend/app.py
index 03b6284..0a651c5 100644
--- a/frontend/app.py
+++ b/frontend/app.py
@@ -21,7 +21,6 @@ def create_app():
     """
     Start the Flask app
     """
-    # Start the Flask app
     app = Flask(__name__)
 
     # Load the appropriate configuration
@@ -50,7 +49,7 @@ def create_app():
     def log_response_info(response):
         app.logger.info('Response: %s %s', response.status, response.get_data(as_text=True))
         return response
-    
+
     return app
 
 
diff --git a/frontend/tests/__init__.py b/frontend/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/frontend/tests/test_frontend.py b/frontend/tests/test_frontend.py
deleted file mode 100644
index 0ea1f33..0000000
--- a/frontend/tests/test_frontend.py
+++ /dev/null
@@ -1,107 +0,0 @@
-import pytest
-import uuid
-import requests_mock
-from unittest.mock import patch
-from flask_testing import TestCase
-from app import create_app
-from config.base_database import db, init_db
-from models.book import Book
-from models.user import User
-from sqlalchemy import text
-
-class TestBackendViews(TestCase):
-    def create_app(self):
-        # Create a Flask app for testing and register the blueprint
-        app = create_app()
-        app.config['TESTING'] = True
-        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'
-        return app
-
-    def setUp(self):
-        # Create database tables
-        with self.app.app_context():
-            db.create_all()
-            db.session.execute(text('DELETE FROM users'))
-            db.session.commit()
-        
-    def tearDown(self):
-        # Drop database tables
-        with self.app.app_context():
-            db.drop_all()
-
-    def test_enroll_user(self):
-        # Perform the test
-        with requests_mock.Mocker() as m:
-            m.post('http://localhost:3000/api/v1/backend/admin/webhooks/add-user', json={}, status_code=200)
-            
-            response = self.client.post('/api/v1/frontend/enroll', json={
-                'email': 'test@example.com',
-                'firstname': 'John',
-                'lastname': 'Doe'
-            })
-            
-            self.assertEqual(response.status_code, 201)
-            self.assertIn(b'User enrolled successfully and backend notified', response.data)
-
-    def test_enroll_user_existing(self):
-        User(email='test@example.com', firstname='John', lastname='Doe').save()
-        response = self.client.post('/api/v1/frontend/enroll', json={
-            'email': 'test@example.com',
-            'firstname': 'John',
-            'lastname': 'Doe'
-        })
-        self.assertEqual(response.status_code, 409)
-        self.assertIn(b'User already enrolled', response.data)
-
-    def test_list_books(self):
-        Book(title='Test Book', publisher='Macmillan', category='Horror', is_available=True).save()
-        response = self.client.get('/api/v1/frontend/books')
-        self.assertEqual(response.status_code, 200)
-        self.assertIn(b'Test Book', response.data)
-
-    def test_get_book(self):
-        book = Book(title='Test Book', publisher='Macmillan', category='Horror', is_available=True)
-        book.save()
-        response = self.client.get(f'/api/v1/frontend/book/{book.id}')
-        self.assertEqual(response.status_code, 200)
-        self.assertIn(b'Test Book', response.data)
-
-    def test_filter_books(self):
-        Book(title='Filtered Book', publisher='Test Publisher', category='Test Category').save()
-        response = self.client.get('/api/v1/frontend/books/filter?publisher=Test Publisher')
-        self.assertEqual(response.status_code, 200)
-        self.assertIn(b'Filtered Book', response.data)
-
-    def test_borrow_book(self):
-        with requests_mock.Mocker() as m:
-            # Mock the backend service response
-            m.post('http://localhost:3000/api/v1/backend/admin/webhooks/update-book', json={}, status_code=200)
-        
-            book = Book(title='Borrowable Book', publisher='Wiley', category='Drama', is_available=True)
-            book.save()
-            response = self.client.post(f'/api/v1/frontend/borrow/{book.id}', json={'days': 7})
-            self.assertEqual(response.status_code, 200)
-            self.assertIn(b'Book borrowed successfully and backend updated', response.data)
-
-    def test_add_book_webhook(self):
-        response = self.client.post('/api/v1/frontend/webhooks/add-book', json={
-            'book_data': {
-                'id': 'new_book_id',
-                'title': 'New Book',
-                'publisher': 'New Publisher',
-                'category': 'New Category',
-                'is_available': True
-            }
-        })
-        self.assertEqual(response.status_code, 200)
-        self.assertIn(b'Book added successfully to frontend', response.data)
-
-    def test_remove_book_webhook(self):
-        book = Book(id='removable_book_id', title='Book to Remove', publisher='Rubbish', category='bin')
-        book.save()
-        response = self.client.post('/api/v1/frontend/webhooks/remove-book', json={'book_id': 'removable_book_id'})
-        self.assertEqual(response.status_code, 200)
-        self.assertIn(b'Book removed successfully', response.data)
-
-if __name__ == '__main__':
-    pytest.main()
\ No newline at end of file
diff --git a/instance/backend_library.db b/instance/backend_library.db
index 8d16946..6136def 100644
Binary files a/instance/backend_library.db and b/instance/backend_library.db differ
diff --git a/instance/frontend_library.db b/instance/frontend_library.db
index 875ba2a..25ef8f5 100644
Binary files a/instance/frontend_library.db and b/instance/frontend_library.db differ
